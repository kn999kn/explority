{"version":3,"sources":["components/Card/index.js","redux/editors/editorsSlice.js","redux/editors/constants.js","components/PlainTextEditor/index.js","screens/Home/EditorCard/index.js","components/List/index.js","screens/Home/AddCardButton/index.js","redux/viewType/viewTypeSlice.js","screens/Home/ChangeViewButton/index.js","screens/Home/index.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["styles","cardContentWrapper","display","flexDirection","boxShadow","cardContent","flex","Card","children","variant","Box","sx","CardContent","editorsSlice","createSlice","name","initialState","id","value","type","text","reducers","editEntity","state","action","entityToEditIndex","findIndex","entity","payload","splice","addEntity","newEntity","push","reorderEntities","startIndex","endIndex","removed","actions","PlainTextEditor","entityData","placeholderText","editor","useMemo","withHistory","withReact","createEditor","dispatch","useDispatch","onChange","placeholder","getItemStyle","isDragging","draggableStyle","isVertical","userSelect","padding","GRID","margin","background","minWidth","maxWidth","border","borderRadius","cursor","_EditorCard","index","useSelector","viewType","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","EditorCard","memo","getListStyle","isDraggingOver","overflow","width","List","items","renderItem","droppableId","direction","droppableProps","map","button","fontSize","AddCardButton","title","Button","size","onClick","uuidv4","viewTypeSlice","toggleViewType","ChangeViewButton","initialTitle","homeWrapper","alignItems","buttonsWrapper","Home","editors","store","onDragEnd","result","destination","source","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","editorsReducer","viewTypeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aac58a5d.chunk.js","sourcesContent":["import React from \"react\";\nimport CardMaterial from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Box from \"@mui/material/Box\";\n\nconst styles = {\n  cardContentWrapper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    boxShadow: \"none\",\n  },\n  cardContent: { flex: \"1 0 auto\" },\n};\n\nexport const Card = ({ children }) => {\n  return (\n    <CardMaterial variant=\"outlined\">\n      <Box sx={styles.cardContentWrapper}>\n        <CardContent sx={styles.cardContent}>{children} </CardContent>\n      </Box>\n    </CardMaterial>\n  );\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { INITIAL_EDITORS_STATE } from \"./constants\";\n\nexport const editorsSlice = createSlice({\n  name: \"editors\",\n  initialState: INITIAL_EDITORS_STATE,\n  reducers: {\n    editEntity: (state, action) => {\n      let entityToEditIndex = state.findIndex(\n        (entity) => action.payload.id === entity.id\n      );\n      state.splice(entityToEditIndex, 1, action.payload);\n    },\n    addEntity: (state, action) => {\n      const newEntity = {\n        id: action.payload.id,\n        value: [\n          {\n            children: [{ text: \"\" }],\n          },\n        ],\n      };\n      state.push(newEntity);\n    },\n    reorderEntities: (state, action) => {\n      const { startIndex, endIndex } = action.payload;\n      const [removed] = state.splice(startIndex, 1);\n      state.splice(endIndex, 0, removed);\n    },\n  },\n});\n\nexport const { editEntity, addEntity, reorderEntities } = editorsSlice.actions;\nexport default editorsSlice.reducer;\n","export const INITIAL_EDITORS_STATE = [\n  {\n    id: \"1\",\n    value: [\n      {\n        type: \"paragraph\",\n        children: [\n          { text: \"This is editable plain text, just like a <textarea>! 1\" },\n        ],\n      },\n    ],\n  },\n  {\n    id: \"2\",\n    value: [\n      {\n        type: \"paragraph\",\n        children: [\n          { text: \"This is editable plain text, just like a <textarea>! 2\" },\n        ],\n      },\n    ],\n  },\n  {\n    id: \"3\",\n    value: [\n      {\n        type: \"paragraph\",\n        children: [\n          { text: \"This is editable plain text, just like a <textarea>! 3\" },\n        ],\n      },\n    ],\n  },\n];\n","import React, { useMemo } from \"react\";\nimport { createEditor } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\nimport { withHistory } from \"slate-history\";\nimport { useDispatch } from \"react-redux\";\nimport { editEntity } from \"../../redux/editors/editorsSlice\";\n\nexport const PlainTextEditor = ({\n  entityData = [],\n  placeholderText = \"Enter some plain text...\",\n}) => {\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  const dispatch = useDispatch();\n  return (\n    <Slate\n      editor={editor}\n      value={entityData.value}\n      onChange={(value) => dispatch(editEntity({ id: entityData.id, value }))}\n    >\n      <Editable placeholder={placeholderText} />\n    </Slate>\n  );\n};\n","import React, { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Card } from \"../../../components/Card\";\nimport { PlainTextEditor } from \"../../../components/PlainTextEditor\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nconst GRID = 8;\nconst CARD_DRAGGING_COLOR = \"#1976d2\";\nconst CARD_BACKGROUND_COLOR = \"white\";\n\n/** Gets style for draggable item depending on item drag state\n * and droppable aria direction (vertical | horizontal)\n */\nconst getItemStyle = (isDragging, draggableStyle, isVertical) => ({\n  userSelect: \"none\",\n  padding: GRID * 2,\n  margin: isVertical ? `0 0 ${GRID}px 0` : `0 ${GRID}px 0 0`,\n  background: isDragging ? CARD_DRAGGING_COLOR : CARD_BACKGROUND_COLOR,\n  minWidth: 200,\n  maxWidth: 300,\n  border: \"1px solid rgb(216 216 216)\",\n  borderRadius: \"10px\",\n  cursor: \"pointer\",\n  ...draggableStyle,\n});\n\nconst _EditorCard = ({ entityData, index }) => {\n  const { isVertical } = useSelector((state) => state.viewType);\n  return (\n    <Draggable key={entityData.id} draggableId={entityData.id} index={index}>\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          style={{\n            ...getItemStyle(\n              snapshot.isDragging,\n              provided.draggableProps.style,\n              isVertical\n            ),\n          }}\n        >\n          <Card>\n            <PlainTextEditor entityData={entityData} />\n          </Card>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nexport const EditorCard = memo(_EditorCard);\n","import React from \"react\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport { useSelector } from \"react-redux\";\n\nconst GRID = 8;\nconst DRAGGING_OVER_COLOR = \"#def5fd\";\nconst BACKGROUND_COLOR = \"#f3f3f3\";\n\n/** Gets droppable area styles depending on draggable element position\n *  and area direction (vertical | horizontal)\n */\nconst getListStyle = (isDraggingOver, isVertical) => ({\n  background: isDraggingOver ? DRAGGING_OVER_COLOR : BACKGROUND_COLOR,\n  display: isVertical ? \"block\" : \"flex\",\n  padding: GRID,\n  overflow: isVertical && \"auto\",\n  width: isVertical ? 340 : \"auto\",\n});\n//This project uses inline styles to simplify the example\n\nexport const List = ({ items, renderItem }) => {\n  const { isVertical } = useSelector((state) => state.viewType);\n\n  return (\n    <Droppable\n      droppableId=\"droppable\"\n      direction={isVertical ? \"vertical\" : \"horizontal\"}\n    >\n      {(provided, snapshot) => (\n        <div\n          {...provided.droppableProps}\n          ref={provided.innerRef}\n          style={getListStyle(snapshot.isDraggingOver, isVertical)}\n        >\n          {items.map(renderItem)}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Button } from \"@mui/material\";\nimport { addEntity } from \"../../../redux/editors/editorsSlice\";\n\nconst styles = {\n  button: {\n    fontSize: \"1.2rem\",\n    margin: \"0 1rem\",\n  },\n};\n\nexport const AddCardButton = ({ title = \"+\" }) => {\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    dispatch(addEntity({ id: uuidv4() }));\n  };\n\n  return (\n    <Button\n      sx={styles.button}\n      variant=\"contained\"\n      size=\"small\"\n      onClick={handleClick}\n    >\n      {title}\n    </Button>\n  );\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const viewTypeSlice = createSlice({\n  name: \"viewType\",\n  initialState: {\n    isVertical: false,\n  },\n  reducers: {\n    toggleViewType: (state) => {\n      state.isVertical = !state.isVertical;\n    },\n  },\n});\n\nexport const { toggleViewType } = viewTypeSlice.actions;\nexport default viewTypeSlice.reducer;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"@mui/material\";\nimport { toggleViewType } from \"../../../redux/viewType/viewTypeSlice\";\n\nconst TO_VERTICAL_VIEW_TEXT = \"Swich to vertical view\";\nconst TO_HORIZONTAL_VIEW_TEXT = \"Switch to horizontal view\";\n\nexport const ChangeViewButton = ({ title }) => {\n  const { isVertical } = useSelector((state) => state.viewType);\n  const dispatch = useDispatch();\n\n  const initialTitle = isVertical\n    ? TO_HORIZONTAL_VIEW_TEXT\n    : TO_VERTICAL_VIEW_TEXT;\n\n  const handleClick = () => {\n    dispatch(toggleViewType());\n  };\n\n  return <Button onClick={handleClick}>{title || initialTitle}</Button>;\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Box from \"@mui/material/Box\";\nimport { EditorCard } from \"../Home/EditorCard\";\nimport { List } from \"../../components/List\";\nimport { AddCardButton } from \"./AddCardButton\";\nimport { ChangeViewButton } from \"./ChangeViewButton\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { reorderEntities } from \"../../redux/editors/editorsSlice\";\n\nconst styles = {\n  homeWrapper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  buttonsWrapper: { margin: \"1rem 0\" },\n};\n\nexport const Home = () => {\n  const editors = useSelector((store) => store.editors);\n  const dispatch = useDispatch();\n\n  const onDragEnd = (result) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n    dispatch(\n      reorderEntities({\n        startIndex: result.source.index,\n        endIndex: result.destination.index,\n      })\n    );\n  };\n\n  return (\n    <Box sx={styles.homeWrapper}>\n      <Box sx={styles.buttonsWrapper}>\n        <AddCardButton />\n        <ChangeViewButton />\n      </Box>\n      <Box>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <List\n            items={editors}\n            renderItem={(entityData, index) => (\n              <EditorCard\n                entityData={entityData}\n                key={entityData.id}\n                index={index}\n              />\n            )}\n          />\n        </DragDropContext>\n      </Box>\n    </Box>\n  );\n};\n","import { Home } from \"./screens/Home\";\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport editorsReducer from \"./editors/editorsSlice\";\nimport viewTypeReducer from \"./viewType/viewTypeSlice\";\n\nexport const store = configureStore({\n  reducer: { editors: editorsReducer, viewType: viewTypeReducer },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}